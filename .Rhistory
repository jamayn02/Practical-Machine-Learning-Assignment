lm(child~1,galton)
head(trees)
fit <- lm(Volume~Girth+Height+Constant -1,trees)
trees2<-eliminate("Girth",trees)
head(trees2)
fit2<-lm(Volume~Height+Constant-1,trees2)
lapply(list(fit,fit2),coef)
lm(Fertility~.,swiss)
all <- lm(Fertility~.,swiss)
summary(all)
lm(Fertility~agriculture,swiss)
lm(Fertility~Agriculture,swiss)
summary(lm(Fertility~Agriculture,swiss))
cor(Examination,Education)
cor(Examination,Education,swiss)
cor(Examination~Education,swiss)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit(Fertility~.+ec,swiss)
efit<-lm(Fertility~.+ec,swiss)
all$coef-efit$coef
all$coefficients-efit$coefficients
View(InsectSprays)
swirl()
summary(InsectSprays)
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,classes)
sapply(InsectSprays,class)
fit<-lm(county~spray,InsectSprays)
fit<-lm(count~spray,InsectSprays)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,InsectSprays)
fit2<-lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
((fit$coef[2])-(fit$coef[3]))/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],hunger)
lmM<-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"],hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno,
| out2[1,])
resno <- out2[1, "y"] - predict(fitno,
out2[1,])
1-resid(fit[1])/resno
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-stdev(fit$residuals)/deviance(fit)
sigma<-sd(fit$residuals)/deviance(fit)
sigma<-sqrt(deviance(fit)/df.residual(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rsd,rstandard(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno))
resid(fit[1])/(sigma1*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno,out2)-predict(fit,out2)
dy
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl<-lm(Fertility~Agriculture+Examination+Catholic+Infant.Mortality,swiss)
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3/43)
d<-deviance(fit3)/43
n<-(deviance(fit1-deviance(fit3))/2
n<-(deviance(fit1-deviance(fit3))/2
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore,binomial,ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
head(hits)
class(hits[,'date'])
as.interger(head(hits[,'date']))
as.integer(head(hits[,'date']))
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lamda<-mdl$fitted.values[704]
lamda <- mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2<-glm(visits~date,poisson,hits,offset=log(visits+1))
mdl2<-glm(simplystats~date,poisson,hits,offset=log(visits+1))
qpois(.95,mdl2$fitted.values[704])
library("acepack", lib.loc="~/R/win-library/3.1")
detach("package:acepack", unload=TRUE)
data(mtcars)
dataset(mtcars)
head(mtcars)
mtcars$am <- as.factor(mtcars$am,labels=c("Auto","Man"))
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am)=c("Auto","Man"))
levels(mtcars$am)=c("Auto","Man")
str(mtcars$am)
hist(mtcars$mpg)
hist(mtcars$mpg,breaks=100)
hist(mtcars$mpg,breaks=10)
curve(dnorm(x,mean=mean(mtcars$mpg), sd=sd(mtcars$mpg),add=TRUE)
curve(dnorm(x,mean=mean(mtcars$mpg), sd=sd(mtcars$mpg),add=TRUE)
curve(dnorm(x,mean=mean(mtcars$mpg), sd=sd(mtcars$mpg),add=TRUE))
curve(dnorm(x,mean=mean(mtcars$mpg), sd=sd(mtcars$mpg)))
curve(dnorm(mtcars$mpg,mean=mean(mtcars$mpg), sd=sd(mtcars$mpg)))
hist(mtcars$mpg,breaks=10)
multiplier <- myhist$counts / myhist$density
mydensity <- density(mtcars$mpg)
mydensity$y <- mydensity$y * multiplier[1]
myhist<-hist(mtcars$mpg,breaks=10)
multiplier <- myhist$counts / myhist$density
mydensity <- density(mtcars$mpg)
mydensity$y <- mydensity$y * multiplier[1]
plot(myhist)
lines(mydensity)
hist(mtcars$mpg,breaks=10,main="Histogram of MPG", xlab="MPG")
hist(mtcars$mpg,breaks=10,main="Histogram of MPG", xlab="MPG", col=red)
hist(mtcars$mpg,breaks=10,main="Histogram of MPG", xlab="MPG", col=BLUE)
hist(mtcars$mpg,breaks=10,main="Histogram of MPG", xlab="MPG", col="red")
hist(mtcars$mpg,breaks=10,main="Histogram of MPG", xlab="MPG", col="black")
hist(mtcars$mpg,breaks=10,main="Histogram of MPG", xlab="MPG", col="darkgray")
hist(mtcars$am,breaks=10,main="Histogram of MPG", xlab="MPG", col="darkgray")
aggregate(mpg~am,mtcars)
aggregate(mpg~am,mtcars,mean)
t.test(mtcars[mtcars$am=="Auto"]$mpg,mtcars[mtcars$am=="Man"]$mpg)
t.test(mtcars[mtcars$am=="Auto",]$mpg,mtcars[mtcars$am=="Man",]$mpg)
fit<-lm(mpg~am,mtcars)
summary(fit)
fit<-lm(mpg~am,mtcars)
summary(fit)
plot(mpg,am,mtcars)
abline(fit)
plot(mtcars$mpg,mtcars$am)
abline(fit)
plot(mtcars$am,mtcars$mpg)
abline(fit)
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(mtcars, am == "Auto")$mpg, col = "green")
hist(subset(mtcars, am == "Auto")$mpg, col = "green")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(mtcars, am == "Auto")$mpg, col = "green")
hist(subset(mtcars, am == "Man")$mpg, col = "green")
plot(mtcars$mpg,mtcars$am)
plot(mtcars$am,mtcars$mpg)
plot(mtcars$am,mtcars$mpg,p)
plot(mtcars$am,mtcars$mpg,type="p")
plot(mtcars$am,mtcars$mpg,main="MPG: Auto vs Man Transmission",ylab="MPG",xlab="Transmission")
par(mfrow=c(2,2))
plot(fit)
bestfit<-step(fit,direction="both")
mostvar<-lm(fit~.,mtcars)
mostvar<-lm(mpg~.,mtcars)
bestfit<-step(mostvar,direction="both")
cor(qsec,hp,mtcars)
pairs(mtcars,panel=panel.smooth,main="mtcars data")
anova(fit,bestfit)
summary(bestfit)
par(mfrow=c(2,2))
plot(bestfit)
best<-step(mostvar,direction="backward")
file.exists(Sys.which('texi2dvi'))
Sys.which("pdflatex")
Sys.getenv("PATH")
install.package("devtools")
devtools::install_github('rstudio/rmarkdown')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
library(caret)
library(cran)
install.packages(c("AppliedPredictiveModeling","caret"))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
str(training)
head(training)
featurePlot(x=training[,c("Cement", "BlastFurnaceslag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")],y=training$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")],y=training$CompressiveStrength,plot="pairs")
qplot(CompressiveStrength,colour=FlyAsh,data=training)
plot(training$CompressiveStrength)
qplot(,CompressiveStrength,colour=FlyAsh,data=training)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
preProc<-preProcess(training[,58:69],method="pca",pcaComp=7)
trainPC<-predict(preProc,training[,58:69])
train1<-training[,c(1,58:69)]
preProc<-preProcess(train1[,58:69],method="pca",pcaComp=7)
preProc<-preProcess(train1[,-1],method="pca",pcaComp=7)
trainPC<-predict(preProc,training[,-1])
preProc<-preProcess(training[,c(-1,58:69)],method="pca",pcaComp=7)
preProc<-preProcess(train1[,58:69],method="pca",pcaComp=7)
preProc<-preProcess(training[,58:69],method="pca",pcaComp=7)
trainPC<-predict(preProc,training[,58:69])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
install.packages(e1071)
install.packages("e1071")
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,test[,58:69])
testPC<-predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc<-preProcess(training[,58:69],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[,58:69])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
> preProc<-preProcess(training[,58:69],method="pca",pcaComp=11)
> trainPC<-predict(preProc,training[,58:69])
> modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
> testPC<-predict(preProc,testing[,58:69])
> confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc<-preProcess(training[,58:69],method="pca",pcaComp=11)
trainPC<-predict(preProc,training[,58:69])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc<-preProcess(training[,58:69],method="pca",pcaComp=12)
trainPC<-predict(preProc,training[,58:69])
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
testPC<-predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
head(train1)
modelFit1<-train(train1$diagnosis~.,method="glm",preProcess="pca",data=train1)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
train1[,c(1,58:69)]
train1<-training[,c(1,58:69)]
test1<-testing[,c(1,58:69)]
modelFit1<-train(train1$diagnosis~.,method="glm",preProcess="pca",data=train1)
confusionMatrix(test1$diagnosis,predict(modelFit,test1))
modelFit<-train(train1$diagnosis~.,method="glm")
modelFit<-train(train1$diagnosis~.,method="glm",data=train1)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
getOption("defaultPackages")
str(mean)
str(lm)
str(dgamma)
str(colSums)
methods(mean)
methods(lm)
methods(dgamma)
methods(colSums)
methods(show)
methods(lm)
methods(dgamma)
methods(colSums)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
test<-subset(segmentationOriginal, Case==1)
train<-subset(segmentationOriginal, Case==2)
test<-subset(segmentationOriginal, Case=="1")
test<-subset(segmentationOriginal, Case=="Test")
train<-subset(segmentationOriginal, Case=="Train")
set.seed(125)
modFit<-train(Class~.,method="rpart",data=train)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library("rpart.plot")
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
TotalIntench2<-c(23000,50000,57000)
FiberWidthCh1<-c(10,10,8,8)
PerimStatusCh1<-c(2,,,2)
newdata<-data.frame(TotalIntench2=23000,FiberWidthCh1=10,PerimStatusCh1=2)
predict(modFit,newdata=newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
modFit<-train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
pred<-predict(modFit,testSA)
missClass(trainSA,modFit)
missClass(trainSA$chd,modFit)
missClass(trainSA$chd,modFit$finalMOdel)
missClass(trainSA,modFit$finalMOdel)
missClass(trainSA$chd,modFit$finalMOdel)
modFit$finalModel
missClass(trainSA$chd,modFit$finalModel)
pred<-predict(modFit,trainSA)
missClass(trainSA$chd,pred)
pred<-predict(modFit,testSA)
missClass(trainSA$chd,pred)
missClass(testSA$chd,pred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
shiny::runApp('Analytics Engineer Program/Developing Data Products/ShinyApp')
setwd("~/Analytics Engineer Program/Developing Data Products/ShinyApp")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runAp(display.mode="showcase")
runApp(display.mode="showcase")
data(mtcars)
cardata<-subset(mtcars,cyl==6&am==0, select=mpg)
cardata
shiny::runApp()
cardata<-subset(mtcars,cyl==8&am==0, select=mpg)
cardata
shiny::runApp()
install.github('rstudio/shinyapps')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jamayn02', token='04ABC5EF4EA2A210B275A65FCCF5F299', secret='WE9h+0jF7Ks+IYdbEZcoSFsIwfu8zA2PBKlzHUkv')
library(shinyapps)
deployApp()
setwd("~/Analytics Engineer Program/Developing Data Products/SlidifyPres")
install.github('slidfy','ramnathv')
library(devtools)
install.github('slidfy','ramnathv')
install_github('slidfy','ramnathv')
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("mydeck")
1. Edit YAML front matter
- Use an empty line followed by three dashes to separate slides!
- Use an empty line followed by three dashes to separate slides.
-Use an empty line followed by three dashes to separate slides.
*Use an empty line followed by three dashes to separate slides.
slidify(index.Rmd)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Analytics Engineer Program/Practical Machine Learning/Project")
pml-training<-read.csv(pml-training.csv)
pml-training<-read.csv("pml-training.csv")
pmltraining<-read.csv("pml-training.csv")
str(pmltraining)
str(pmltraining$classe)
levels(pmltraining$classe)
head(pmltraining$classe)
pmltraining<-read.csv("pml-training.csv",na.strings=c("","NA","#DIV/0!"))
str(pmltraining)
pmltraining<-pmltraining[,colSums(is.na(pmltraining))==0]
library(caret)
inTrain<-createDataPartition(y=pmltraining$classe,p=0.6,list=FALSE)
training<-pmltraining[inTrain,]
test<-pmltraining[-inTrain,]
M<-abs(cor(training[,-training$classe]))
M<-abs(cor(training[,-60]))
modFitAll<-train(classe~.,data=training,method="lm")
modFitAll<-train(classe~.,data=training,method="rpart")
library(rattle)
fancyRpart(modFitAll$finalModel)
fancyRpartPlot(modFitAll$finalModel)
modFitAll$finalModel
modFitAll<-train(classe~.,data=training,method="glm")
modFitAll<-train(classe~.,data=training,method="rf")
pmltraining<-read.csv("pml-training.csv",na.strings=c("","NA","#DIV/0!"))
pmltraining<-pmltraining[,colSums(is.na(pmltraining))==0]
pmltraining<-pmltraining[c(-1)]
library(caret)
set.seed(1445)
inTrain<-createDataPartition(y=pmltraining$classe,p=0.6,list=FALSE)
training<-pmltraining[inTrain,]
test<-pmltraining[-inTrain,]
pmltraining<-read.csv("pml-training.csv",na.strings=c("","NA","#DIV/0!"))
pmltraining<-pmltraining[,colSums(is.na(pmltraining))==0]
pmltraining<-pmltraining[,c(1:7)]
pmltraining<-read.csv("pml-training.csv",na.strings=c("","NA","#DIV/0!"))
pmltraining<-pmltraining[,colSums(is.na(pmltraining))==0]
pmltraining<-pmltraining[,-c(1:7)]
library(caret)
set.seed(1445)
inTrain<-createDataPartition(y=pmltraining$classe,p=0.6,list=FALSE)
training<-pmltraining[inTrain,]
test<-pmltraining[-inTrain,]
modFitRPart<-train(Classe~.,method="rpart",data=training)
modFitRPart<-train(classe~.,method="rpart",data=training)
modFitRpartpredict<-predict(modFitRPart$finalModel,training$classe)
modFitRpartpredict<-predict(modFitRPart$finalModel,training)
confusionMatrix(modFitRpartpredict,training$classe)
modFitRpartpredict<-predict(modFitRPart$finalModel,training,type="class")
confusionMatrix(modFitRpartpredict,training$classe)
modFitRF<-train(Classe~.,method="rf",data=training)
modFitRF<-train(classe~.,method="rf",data=training)
modFitRF<-train(classe~.,method="rf",data=training,trControl=trainControl(method="cv",number = 5),prox=TRUE)
modFitRF<-predict(modFitRF$finalModel,training, type="class")
confusionMatrix(modFitRF,training$classe)
modFitRFtestpredict<-predict(modFitRF$finalModel,testing, type="class")
modFitRF<-train(classe~.,method="rf",data=training,trControl=trainControl(method="cv",number = 5),prox=TRUE)
modFitRFpredict<-predict(modFitRF$finalModel,training, type="class")
modFitRFpredicttest<-predict(modFitRF$finalModel,testing, type="class")
modFitRFpredicttest<-predict(modFitRF$finalModel,test, type="class")
confusionMatrix(modFitRFpredicttest)
confusionMatrix(modFitRFpredicttest,test$classe)
pmltest<-read.csv("pml-testing.csv",na.strings=c("","NA","#DIV/0!"))
pmltest<-pmltest[,colSums(is.na(pmltest))==0]
pmltest<-pmltest[,-c(1:7)]
predictteset<-predict(modFitRF$finalModel,pmltest,type="class")
predictteset
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictteset)
